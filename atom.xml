<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Gensokyo]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://chinuno-usami.github.io/"/>
  <updated>2015-06-26T17:19:54.794Z</updated>
  <id>http://chinuno-usami.github.io/</id>
  
  <author>
    <name><![CDATA[Chinuno Usami]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[说说live usb吧]]></title>
    <link href="http://chinuno-usami.github.io/2015/06/27/live-usb/"/>
    <id>http://chinuno-usami.github.io/2015/06/27/live-usb/</id>
    <published>2015-06-26T16:23:05.000Z</published>
    <updated>2015-06-26T17:19:54.794Z</updated>
    <content type="html"><![CDATA[<p>之前看了Bloody Mondy。觉得把自己的系统放在u盘里随身携带蛮方便的，所以自己也想试着做一个。然而…<br><a id="more"></a><br>linux的发行般基本上都有一个live cd模式，可以在不安装系统的情况下使用系统。<br>目前把linux系统做到u盘里面就这么三种方法</p>
<ol>
<li>直接把安装盘镜像写入u盘中，当成live cd使用，读写操作在内存中运行，关机之后数据不保留。</li>
<li>直接把u盘当成硬盘，把系统装在里面使用，就算重启数据也不会丢失。</li>
<li>使用ubuntu的启动盘创建器或者lili之类的工具做成live usb,关机之后仍然保留数据。</li>
</ol>
<p>既然要做成随身系统u盘，那第一种方法就不考虑了，关键时候用用还行，比如像前几天对树莓派sd卡做fsck的时候就只能掏出好几年前烧的ubuntu光碟进live cd去做了。</p>
<p>之前有试过把openSUSE直接安装到u盘中用，然而开机就等了快20min，好不容易进入系统了却基本上什么都做不了，卡成poi。艰难的开了top看了一下wa,基本上都是在70~90+的范围内，估计就算勉强用下去了，过不了多久这u盘也该报废了（usb2.0的u盘，3.0应该不会有这样的问题吧，不过价格稍微高了些，用来这样烧感觉也是…）</p>
<p>第三种做成live usb之前没有试过，原先认为的是，live usb进入系统后系统跟live cd一样是在内存中运行，而必要的修改才写入u盘或者关机的时候一起写入。然而事实证明我想多了。</p>
<p>下载了个ubuntu14.04LTS来做live usb,用ubuntu 自带的启动盘制作工具来做。创建完毕后直接重启使用。跟live cd一样开始选单就那几样，试用，安装，内存测试…。开机时间也是特别长，我猜我已经知道是什么情况了。等了好长一段时间后进入桌面了。果然还是卡出翔。开了top查看wa。呵呵。70~90+。</p>
<p>df查看了下目录挂载情况。除了tmpfs挂在/tmp以外就看到/cow on /。原来live usb是这样的。他创建了个casper-rw文件。查看类型是<br><code>casper-rw: Linux rev 1.0 ext3 filesystem data, UUID=eaf128a8-c26c-4cd8-8f59-5ab3999619ba (needs journal recovery) (large files)</code><br>系统启动后就挂载在根目录下，这样所有的读写操作都是在这个文件中进行的，相当于wubi一样，天了撸。live usb就是为usb的读写做了点优化，把/tmp放到内存中，挂载的时候加了个noatime不在读文件的时候写入访问时间这样而已。读写都还是在一个文件里面完成的。。起码文件系统也做成ext2的把，ext3的日志更加增加了u盘的写入量。</p>
<p>最后想想，这种东西别太在意了。有个live cd急救用就行，电视剧始终是电视剧，在虚拟世界中追求真实感的人脑子一定有问题（阿虚脸）。真要做的话或许可以搞个移动硬盘或者ssd走起（前提还是要有usb3.0接口，否则浪费那些人身就太不值了）。另外随身携带一个树莓派或许是个不错的选择（或许不。树莓派的供电是个问题，况且万一遇到需要查看硬盘的<code>审计情况</code>呢？）））</p>
<hr>
<p>怎么总觉得总是在这个时间点更新博客呢<br>2015年 06月 27日 星期六 01:17:09 CST<br><img src="http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/b6/doge_thumb.gif" alt="doge"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前看了Bloody Mondy。觉得把自己的系统放在u盘里随身携带蛮方便的，所以自己也想试着做一个。然而…<br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://chinuno-usami.github.io/tags/linux/"/>
    
      <category term="live usb" scheme="http://chinuno-usami.github.io/tags/live-usb/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[转用tmux替代screen]]></title>
    <link href="http://chinuno-usami.github.io/2015/06/14/tmux/"/>
    <id>http://chinuno-usami.github.io/2015/06/14/tmux/</id>
    <published>2015-06-13T16:45:08.000Z</published>
    <updated>2015-06-13T17:45:22.682Z</updated>
    <content type="html"><![CDATA[<p>在ssh连接到机器上时经常需要中断连接，但是执行一半的操作还需要继续运行下去。<br>原来使用的是screen来解决这个问题，然而screen兼容性不太好，对于一些程序执行会出问题。然后今天换了tmux来做这件事，测试了一下原先在screen上会出问题的程序，一点问题也没有。另外，tmux会在底部显示当前会话当前窗口的信息，界面也很好看，甚至还可分割屏幕放置不同的窗口，切换窗口的方式特别多用起来也方便。已经没必要再使用screen了，目前为止的完美解决方案。嗯。这篇日志就是用来表达我激动的心情而已。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在ssh连接到机器上时经常需要中断连接，但是执行一半的操作还需要继续运行下去。<br>原来使用的是screen来解决这个问题，然而screen兼容性不太好，对于一些程序执行会出问题。然后今天换了tmux来做这件事，测试了一下原先在screen上会出问题的程序，一点问题也没有]]>
    </summary>
    
      <category term="linux" scheme="http://chinuno-usami.github.io/tags/linux/"/>
    
      <category term="tmux" scheme="http://chinuno-usami.github.io/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[堆栈溢出攻击原理分析]]></title>
    <link href="http://chinuno-usami.github.io/2015/06/13/overflow/"/>
    <id>http://chinuno-usami.github.io/2015/06/13/overflow/</id>
    <published>2015-06-13T14:03:15.000Z</published>
    <updated>2015-06-13T17:32:10.362Z</updated>
    <content type="html"><![CDATA[<h1 id="0x01_概述">0x01 概述</h1><p>之前就听说过堆栈溢出攻击，但是一直都没仔细想过其中的原理，也不知道实际该怎么实现，今天花了一下午讨论了一下有了点自己的理解。记录下来。<br><a id="more"></a></p>
<h1 id="0x02_分析">0x02 分析</h1><p>堆栈溢出思路是，对于不进行对用户输入数据进行检测的程序，可以把输入数据写到正常存放数据区域的后面，把函数返回地址修改掉，执行自己的代码。<br>主要有两种方式。</p>
<h3 id="第一种">第一种</h3><p>内存中栈的结构大概是这样的</p>
<p>栈底（高地址）寄存器ebp（64位为rbp）<br>……这里是其他数据<br>这里是函数返回地址<br>……这里是局部变量，数据放在这里<br>……这里是其他数据<br>栈顶（低地址）寄存器esp（64位为rsp）</p>
<p>通过写入超过变量分配内存大小的数据从低地址写到高地址把返回地址修改掉<br>然后程序就会执行修改后的地址中的指令</p>
<ol>
<li>首先查找执行call rsp/esp指令所在的地址记为jmpAddr</li>
<li>调试定位返回地址相对于输入数据地址的偏移量</li>
<li>编译自定义的程序，提取shellcode</li>
<li>用pad+jmpAddr+shellcode的形式输入数据</li>
</ol>
<p>运行之后应该就执行了shellcode的指令了。<br>pad用于填充前面的数据，一直到函数返回地址所在位置。<br>继续写入jmpAddr，把跳板地址写入函数返回地址所在位置，这样函数返回将会调用jmpAddr处的指令，即call rsp/esp。<br>接着继续往高地址写入shellcode的内容<br>这里要注意的是因为写入数据是一个字节一个字节的往高地址写入，所以应当以小端方式写入地址。<br>在函数返回时子程序出栈esp/rsp栈顶应当指向shellcode的位置<br>函数返回跳转到jmpAddr执行call esp/rsp，调用esp/rsp处的程序<br>此时便进行了调用shellcode的操作。</p>
<h3 id="第二种">第二种</h3><p>windows下的程序在执行过程中遇到错误会调用错误处理程序。<br>一样的道理，写入数据的时候把错误处理程序的入口指向执行call ebx的地址，这时ebx基地址寄存器中的地址位于入口地址前4个字节。在四个字节前写入jmp 04跳过入口地址执行紧接其后的shellcode即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="0x01_概述">0x01 概述</h1><p>之前就听说过堆栈溢出攻击，但是一直都没仔细想过其中的原理，也不知道实际该怎么实现，今天花了一下午讨论了一下有了点自己的理解。记录下来。<br>]]>
    
    </summary>
    
      <category term="overflow" scheme="http://chinuno-usami.github.io/tags/overflow/"/>
    
      <category term="pwn" scheme="http://chinuno-usami.github.io/tags/pwn/"/>
    
      <category term="堆栈溢出" scheme="http://chinuno-usami.github.io/tags/%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[命令行网易云音乐]]></title>
    <link href="http://chinuno-usami.github.io/2015/05/31/netease/"/>
    <id>http://chinuno-usami.github.io/2015/05/31/netease/</id>
    <published>2015-05-31T05:28:54.000Z</published>
    <updated>2015-05-31T06:35:23.495Z</updated>
    <content type="html"><![CDATA[<p>在家里听音乐用的方案<br><a id="more"></a><br>在家里听作业BGM，电脑开个网易云音乐的网页一个比较占用资源，一个耗电，而且电脑音箱效果也不是很好。所以就想要在客厅用音响播放。</p>
<h1 id="方案">方案</h1><p>一个解决方案是surface pro3或者手机播放，使用电视投影功能在电视播放，从音响输出，然而这样一来占用网速，而且还要视频编码解码运算量大耗电发热音质还有损失，还要开个电视也不方便，听歌的时候也不能使用电视了。<br>所以用另一个方案，利用树莓派运行命令行的网易云音乐客户端，直接输出到音响。这样不用开电脑不用开电视，轻量级的解决方案。</p>
<h1 id="实现">实现</h1><p>命令行网易云音乐用的<a href="https://github.com/bluetomlee/NetEase-MusicBox" target="_blank" rel="external">NetEase-MusicBox</a><br>因为之前被网易要求删除代码，所以原本的项目已经没了，在pip上面也找不到，不过有人fork了所以还能找到代码。不通过pip获取，直接clone源代码进行安装就行。<br>在A岛技术版看到有个串有人也自己用python也实现另一个命令行版本「还没完成的样子」，说是因为目前的客户端并不能提供320kbps的音乐，而且缺少推荐曲目信息。然而github上找的readme中说了支持320kbps的音乐，不知道是被修改过后的版本？  </p>
<h1 id="使用">使用</h1><p>现在在使用sp3开Putty连到树莓派上就能进行播放控制了，使用screen可以在断开连接之后继续播放，也可以在其他终端继续控制，会方便点。当然不只是sp3可以控制，使用nexus7也可以控制了，android上也有ssh连接的app，连上之后screen -x继续回到客户端控制会话就行。  </p>
<h1 id="本文编辑工具">本文编辑工具</h1><p>这篇文章改在linux驱动的台式机上码了，全键盘用起来比sp3舒服点，字也没那么小。用的Cmd Markdown编辑器的linux客户端，然而就只是一个包装好的web app而已并没有什么卵用，连打开本地md文件都不能够。编辑器的语法跟MarkdownPad稍微有点不一样，应该也是支持GFM的，估计hexo也能够支持这种语法。</p>
<h1 id="以上">以上</h1>]]></content>
    <summary type="html">
    <![CDATA[<p>在家里听音乐用的方案<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://chinuno-usami.github.io/tags/python/"/>
    
      <category term="命令行" scheme="http://chinuno-usami.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="树莓派" scheme="http://chinuno-usami.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="网易云音乐" scheme="http://chinuno-usami.github.io/tags/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PIL无法切割图片无法保留alpha信息]]></title>
    <link href="http://chinuno-usami.github.io/2015/05/23/pil/"/>
    <id>http://chinuno-usami.github.io/2015/05/23/pil/</id>
    <published>2015-05-23T04:38:40.000Z</published>
    <updated>2015-05-31T06:35:25.045Z</updated>
    <content type="html"><![CDATA[<h1 id="近况">近况</h1><p>好像很久没有更新的样子了。现在都要准备考研了我想很长一段时间都不怎么会更新这里了<br>以上</p>
<hr>
<h1 id="正文">正文</h1><p>原先是打算把目录下的几张4*4的游戏行走图素材切割成单张图片使用的，所以用了Python写了段程序来切割图片，然而切割出来的图片背景都变成白色了，丢失了alpha信息。于是跟屌泽探讨了一下，稍微在这里记录下吧</p>
<a id="more"></a>
<p>下面是自己写的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_split</span><span class="params">(pic_name)</span>:</span></span><br><span class="line">	pic = Image.open(pic_name)</span><br><span class="line">	size_sx = pic.size[<span class="number">0</span>]/<span class="number">4</span></span><br><span class="line">	size_sy = pic.size[<span class="number">1</span>]/<span class="number">4</span></span><br><span class="line">	region = (<span class="number">0</span>,<span class="number">0</span>,size_sx,size_sy)</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">17</span>):</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"    [+] spliting %i of %s...\t"</span>%(x,file_name),</span><br><span class="line">		img_crop = pic.crop(region)</span><br><span class="line">		img_crop.save(<span class="string">'splited\\'</span>+pic_name[:-<span class="number">4</span>]+<span class="string">'_'</span>+<span class="string">"%i"</span>%x+<span class="string">".png"</span>)</span><br><span class="line">		<span class="keyword">print</span> <span class="string">"[done]"</span></span><br><span class="line">		<span class="keyword">if</span> x%<span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">			region = (<span class="number">0</span>,region[<span class="number">1</span>]+size_sy,size_sx,region[<span class="number">3</span>]+size_sy)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			region = (region[<span class="number">0</span>]+size_sx,region[<span class="number">1</span>],region[<span class="number">2</span>]+size_sx,region[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"[+] getting picture files ...\t\t"</span>,</span><br><span class="line">	file_lst = os.listdir(os.getcwd())</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"[done]"</span></span><br><span class="line">	<span class="keyword">for</span> file_name <span class="keyword">in</span> file_lst:</span><br><span class="line">		<span class="keyword">if</span> file_name[-<span class="number">4</span>:] == <span class="string">".png"</span>:</span><br><span class="line">			<span class="keyword">print</span> <span class="string">"[+] spliting picture %s..."</span>%file_name</span><br><span class="line">			<span class="keyword">try</span>:</span><br><span class="line">				image_split(file_name)</span><br><span class="line">			<span class="keyword">except</span> Exception, e:</span><br><span class="line">				<span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>
<p>看起来好像是没什么问题<br>然后屌泽自己也写了段代码，说在他那里执行切割出来是带有alpha信息的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def test():</span></span><br><span class="line"><span class="comment">#     # 1  1</span></span><br><span class="line"><span class="comment">#     # 2  4 8 6 2</span></span><br><span class="line"><span class="comment">#     # 3  9 7 1 3</span></span><br><span class="line"><span class="comment">#     # 4  6 4 6 4</span></span><br><span class="line"><span class="comment">#     # 5  5</span></span><br><span class="line"><span class="comment">#     # 6  6</span></span><br><span class="line"><span class="comment">#     # 7  9 3 1 7</span></span><br><span class="line"><span class="comment">#     # 8  4 2 6 8</span></span><br><span class="line"><span class="comment">#     # 9  1 9 1 9</span></span><br><span class="line"><span class="comment">#     # 0  0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     i = 30</span></span><br><span class="line"><span class="comment">#     temp = i</span></span><br><span class="line"><span class="comment">#     for x in xrange(0,i-1):</span></span><br><span class="line"><span class="comment">#         temp = temp * i</span></span><br><span class="line"><span class="comment">#         # print temp</span></span><br><span class="line"><span class="comment">#         print temp%10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def main():</span></span><br><span class="line"><span class="comment">#     i = 5</span></span><br><span class="line"><span class="comment">#     i = i % 10</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#     # main()</span></span><br><span class="line"><span class="comment">#     test()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># import cv2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitImage</span><span class="params">(spx,spy,filepath)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    im = Image.open(filepath)</span><br><span class="line">    <span class="comment"># im = Image</span></span><br><span class="line"></span><br><span class="line">    _imageWidth , _imageHeight = im.size</span><br><span class="line"></span><br><span class="line">    _eachHeight = _imageHeight / spy</span><br><span class="line">    _eachWidth  = _imageWidth / spx</span><br><span class="line"></span><br><span class="line">    _top = <span class="number">0</span></span><br><span class="line">    _left = <span class="number">0</span></span><br><span class="line">    <span class="comment"># order = 0</span></span><br><span class="line">    <span class="comment"># imagesList = Image[]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,spx):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">1</span>,spy):</span><br><span class="line">            savepath = filepath + str(x) + str(y) + <span class="string">".png"</span></span><br><span class="line">            im.crop((_left , _top , _left + _eachWidth , _top +_eachHeight)).save(savepath)</span><br><span class="line">            _top = _top + _eachHeight</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        _top = <span class="number">0</span></span><br><span class="line">        _left = _left + _eachWidth</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print im.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    args = sys.argv</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(args) != <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    splitImage(int(args[<span class="number">2</span>]),int(args[<span class="number">3</span>]),args[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>
<p>其实感觉实现的都一样，自己这里又运行了一下发现仍然没有alpha信息。<br>然后屌泽说了可能是pil版本问题<br>自己用的是官网上09年最新的1.1.7版本64位编译<br>而屌泽说他用的是pycharm内的2.4.0版本<br>WTF?!官方不是最新的才1.1.7嘛！<br>后来想想可能是原来的页面没有更新，其实PIL还在继续维护<br>后来的新版本修复了这个问题</p>
<p>直到现在。。又看了看当时的记录，他有一张截图出现的是pillow。一直不知道有pillow这东西，以为就只有pil，于是网上查了下，是一个替代pil的图像处理库，现在也基本上都用pillow来处理图像了。<br>从上面的代码也看得出，我用的import Image，而屌泽用的是form PIL import Image<br>他一直都是在用pillow，问了一下他他说他以为我说的pil就是pillow。。<br>行了现在也知道为什么他的版本会有2.4.0出来了<br>看来这问题最终还是pil的问题，而且一直没有更新才出现了pillow这个替代库并解决了这问题</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="近况">近况</h1><p>好像很久没有更新的样子了。现在都要准备考研了我想很长一段时间都不怎么会更新这里了<br>以上</p>
<hr>
<h1 id="正文">正文</h1><p>原先是打算把目录下的几张4*4的游戏行走图素材切割成单张图片使用的，所以用了Python写了段程序来切割图片，然而切割出来的图片背景都变成白色了，丢失了alpha信息。于是跟屌泽探讨了一下，稍微在这里记录下吧</p>]]>
    
    </summary>
    
      <category term="pil" scheme="http://chinuno-usami.github.io/tags/pil/"/>
    
      <category term="python" scheme="http://chinuno-usami.github.io/tags/python/"/>
    
      <category term="图像处理" scheme="http://chinuno-usami.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[旧电脑升级]]></title>
    <link href="http://chinuno-usami.github.io/2015/04/19/pc-upgrade/"/>
    <id>http://chinuno-usami.github.io/2015/04/19/pc-upgrade/</id>
    <published>2015-04-18T16:03:35.000Z</published>
    <updated>2015-04-18T17:24:13.985Z</updated>
    <content type="html"><![CDATA[<h1 id="0x01">0x01</h1><p>家里十几年前的电脑现在已经彻底不能用了，主板几乎所有的部件都坏了，所以就考虑说把这电脑升级一下然后就又满血复活了。<br>说是升级一下不过就目前状况几乎是相当于换了一台新机了，因为整块主板换掉包括CPU内存条这些全都要换了，就保留了个机箱显示器还有两个硬盘一个光驱（原来用于装系统的硬盘因为是IDE接口的已经不能在新主板上用了）。<br><a id="more"></a></p>
<h1 id="0x02">0x02</h1><p>最后决定是这样的配置了</p>
<ul>
<li>CPU:i5-4590</li>
<li>内存:金士顿8G 1600</li>
<li>主板：阿苏斯Z97M-PLUS（原来的机箱还他喵竟然是用中板的。。）</li>
<li>显卡：核显（核心显卡。。不是核显卡）</li>
</ul>
<p>这三个配件到X宝上找，半个星期后到货。</p>
<h1 id="0x03">0x03</h1><p>把配件都装上后正常点亮，电源换了之前以为是电源故障去新买的450W电源，因为没有独立显卡所以足够用的。原来装系统的IDE接口硬盘无法接上主板后只能重新装新的系统了，把原来装xubuntu的硬盘格掉用于装新系统。本来就打算装的WIN8.1+UBUNTU双系统，因为MBR限制，硬盘分了4个主分区一个用于windows系统一个用于ubuntu一个用于存储数据一个windows隐藏分区，ubuntu只能只有一个分区挂载/了，连交换区都没有。（事实证明一开始这步就已经做错了）。</p>
<h1 id="0x04">0x04</h1><p>顺利装上win8.1并且从主板驱动光盘装完驱动后就只有读卡器跟前面板的耳机麦克风不能用以外其他工作正常。<br>进一步从U盘安装了ubuntu并且顺利进入ubuntu系统，在系统更新完毕，该配置的东西都配置好之后发现windows系统不管怎样都进不去了，而且硬盘其他NTFS分区都被锁定无法挂载了，这才想起来可能是因为win8.1的快速启动造成的问题。然而因为是MBR分区所以windows系统也进不去了，只能格掉重新安装了otl。</p>
<h1 id="0x05">0x05</h1><p>于是这次打算使用UEFI安装系统，使用UEFI进行系统的启动。把硬盘格掉后转换成GPT分区表，然后因为GPT分区表支持128个主分区所以也没有之前那4个主分区的限制了，除了ESP和MSR两个必须和分区外还能为ubuntu各个目录和交换区添加新的主分区了。</p>
<h1 id="0x06">0x06</h1><p>启动方式修改为仅UEFI后选择win8.1安装U盘，结果无论如何都无法从U盘启动。后来想了想是因为U盘分区表用的还是MBR，于是转换成GPT，因为原本U盘分区前后都没有其他空间供转换GPT使用因此只能删除分区后转换为GPT了。UEFI的启动方式是从第一个FAT32分区查找EFI文件进行启动而不是MBR那样读取前512字节，这样的话就好办多了，直接从安装盘镜像提取文件放到U盘上的FAT32分区即可。最后插到电脑上用UEFI方式启动成功。接着按照原来的步骤再把系统装一遍。</p>
<h1 id="0x07">0x07</h1><p>win8.1安装完之后第一件事就是把快速启动给关掉。然后把ubuntu安装U盘转换成GPT继续安装ubuntu。<br>在ubuntu安装完之后先试着重启看看能不能进入windows系统。在系统启动后进到grub界面，此时可以看到有一个windows boot manager选项，选择之后直接进入windows系统。重启后依然还是进到grub，选择ubuntu选项后进入到ubuntu系统，并且磁盘上的其他分区也能够自由挂载了。看来已经可以实现开机选择两个操作系统了。有人提到需要rEFInd才能进行开机选择两个操作系统应该是因为win8.1的快速启动吧。</p>
<h1 id="0x08">0x08</h1><p><img src="http://ww3.sinaimg.cn/large/4ec84d23gw1era7y5wkatj20sg0lc452.jpg" alt=""><br>果然还是最喜欢NUMIX主题了,另外还看到过一个还在开发中的主题<a href="http://snwh.org/paper/" target="_blank" rel="external">PAPER</a>看起来也不错<br><img src="http://www.linuxidc.com/upload/2014_12/141222195368731.png" alt=""><br><img src="http://snwh.org/paper/screenshots/9.png" alt=""><br>有点可惜的是在unity上面显得有点难看了：(</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="0x01">0x01</h1><p>家里十几年前的电脑现在已经彻底不能用了，主板几乎所有的部件都坏了，所以就考虑说把这电脑升级一下然后就又满血复活了。<br>说是升级一下不过就目前状况几乎是相当于换了一台新机了，因为整块主板换掉包括CPU内存条这些全都要换了，就保留了个机箱显示器还有两个硬盘一个光驱（原来用于装系统的硬盘因为是IDE接口的已经不能在新主板上用了）。<br>]]>
    
    </summary>
    
      <category term="pc" scheme="http://chinuno-usami.github.io/tags/pc/"/>
    
      <category term="升级" scheme="http://chinuno-usami.github.io/tags/%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio引用Library]]></title>
    <link href="http://chinuno-usami.github.io/2015/04/14/android-studio-add-library/"/>
    <id>http://chinuno-usami.github.io/2015/04/14/android-studio-add-library/</id>
    <published>2015-04-14T12:19:08.000Z</published>
    <updated>2015-04-14T13:24:10.545Z</updated>
    <content type="html"><![CDATA[<p>使用微博sdk需要引入sdk的library，现在用的<code>Android Studio</code>不知道该怎么引所以网上查了一下。好像基本上没人在说这个问题。先把它记录下来免得以后忘了。</p>
<ul>
<li>点击<code>File-&gt;Import Module</code><br><img src="http://ww3.sinaimg.cn/large/4ec84d23gw1er5ds0om4aj20bm06pdge.jpg" alt=""></li>
<li>填入路径next就行<br><img src="http://ww1.sinaimg.cn/large/4ec84d23gw1er5dyufhxzj215o0qo41g.jpg" alt=""></li>
<li>好了。添加进去了<br><img src="http://ww4.sinaimg.cn/large/4ec84d23gw1er5erwtnbyj20et09x0tg.jpg" alt=""></li>
<li>最后记得添加dependencies就行<br><img src="http://ww3.sinaimg.cn/large/4ec84d23gw1er5eyvlvpdj20rv0940u3.jpg" alt=""></li>
</ul>
<p>= =好吧今天这篇真是短。内容有用就行啦。<br>嗯顺便清理了几篇比较羞耻的文章，感觉萌萌哒【【【。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用微博sdk需要引入sdk的library，现在用的<code>Android Studio</code>不知道该怎么引所以网上查了一下。好像基本上没人在说这个问题。先把它记录下来免得以后忘了。</p>
<ul>
<li>点击<code>File-&gt;Import M]]>
    </summary>
    
      <category term="Android" scheme="http://chinuno-usami.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://chinuno-usami.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Surface Pro 3 购买参考与使用感受]]></title>
    <link href="http://chinuno-usami.github.io/2015/04/06/surface-pro-3/"/>
    <id>http://chinuno-usami.github.io/2015/04/06/surface-pro-3/</id>
    <published>2015-04-06T08:36:57.000Z</published>
    <updated>2015-04-07T07:28:56.850Z</updated>
    <content type="html"><![CDATA[<h1 id="缘由">缘由</h1><p>自己在几个月前入了Surface Pro 3，然后身边有人看到之后也买了个，自己就像把自己用了几个月的感受说一下方便各位在想买这机子的时候进行参考。</p>
<a id="more"></a>
<h1 id="需求分析">需求分析</h1><p>要买Surface Pro 3的话首先还是应该好好分析一下是不是一定要买这台机子，有没有其他更好的方案。毕竟SP3的价格还是很高的，如果不是真·土豪还真是没法买个当玩具玩的。<br>当时买SP3的时候考虑在学校没有一个笔电可以方便携带的，在很多时候真的很麻烦，SP3大小正合适，重量也不重，裸机大约<code>800+g</code>,而加上Type Cover重量也大约<code>1kg</code>,拿在手上对比了一下比ipad air还轻。<br>主要用来上课使用，记笔记有<code>压感笔</code>加上Metro界面的onenote非常方便，手机用的撸妹，电脑上的笔记备忘录都可以自动跟手机进行同步。<br>学校的机房配置虽然说不差，不过不管什么东西都要跑在虚拟机里这就不能忍了。。特别是Android应用开发。。虚拟机里面再开个arm虚拟机，基本上虚拟机开机要开个十分钟，然后什么都做不了了。现在需要做的都在SP3上做了，去机房的时候带上就在那边做，做完直接提交。<br>电脑一直都是放在学校宿舍的，回来的时候电脑都要跟家人抢着用【【基本上能用到的时间基本没有。现在SP3携带也方便，放在包里都已经随身携带了。<br>主要用到的情况就是开发了，装个VS开发Windows程序游戏什么的，Python必备脚本环境，Android Studio开发Android的应用，SP3的i3版本已经基本上不用考虑了。  </p>
<ul>
<li>如果说是为了玩玩而已那么Android平板和ipad已经可以满足了，能玩的东西比SP3还多。</li>
<li>如果说是为了玩舰女人推GAL的话千元寨板完全可以满足，而且还性能过剩了</li>
<li>如果只是为了作为笔记本用而已那么买普通的笔电就行，同样的性能需要的价钱少得多，而且接口充足不需要用的这么纠结。</li>
<li>如果还有壕壕要性能要便携可以看看其他的超极本，可以变的花样也蛮多的(比如说壕壕你要不要买XPS13呢??</li>
<li>如果说是为了Surface特有的这些特性而不是拿来工作什么的，那么可以等Surface 3了，CPU要比国产寨板好些，屏幕也大点，价格不至于这么高而且mico usb充电就像普通平板一样可以用移动电源充电，这点SP3可做不到。。这是最均衡的选择了</li>
</ul>
<h1 id="型号选择">型号选择</h1><p>如果认真分析之后觉得确实需要入SP3的话，那么就该考虑一下型号的选择了<br>i3版本不推荐入了，真有这个档位的需求可以入Surface 3<br>我的机子是国行i5 128G的专业版，权衡经济实力后得到的结果。SP3在中国大陆以外的机子都是可以全球联保的，国内不保水货机子(真是一片神奇的大陆<br>如果要考虑保修方面的话那么买国行机子吧，水货机子可以到香港保修，比较麻烦。<br>国行机子有<code>中文版</code>和<code>专业版</code>两种版本，主要区别在  </p>
<ol>
<li>中文版预装了office2013学生版，永久授权的。而专业版只有一个月试用期的office365</li>
<li>中文版不能够安装其他语言的语言包，只能用中文。这点倒是无所谓吧。</li>
<li>专业版还包含”远程桌面链接”、“域加入”、”从VHD启动”和”客户端Hyper-V”等针对企业的软件和优化。如果说需要用来开发wp应用或者比较喜欢折腾的，需要这些功能的可以选择专业版。</li>
</ol>
<p>真的土豪或者真的需要高性能的话尽管选择高配版本吧:D</p>
<h1 id="其他的一些注意点">其他的一些注意点</h1><p>在入SP3之前还有这么些地方需要注意一下</p>
<h3 id="机子外观">机子外观</h3><p><img src="http://ww3.sinaimg.cn/large/4ec84d23gw1eqwa93haxcj21kw0w04i1.jpg" alt=""><br>这是机子平时使用的样子<br><img src="http://ww1.sinaimg.cn/large/4ec84d23gw1eqwxu2qvb1j21kw0w0u00.jpg" alt=""><br>正面<br><img src="http://ww2.sinaimg.cn/large/4ec84d23gw1eqwxur5m70j21kw0w0e1v.jpg" alt=""><br>背面。可能是因为使用方式不对背面掉漆不能看了</p>
<h3 id="屏幕">屏幕</h3><p>手上的这台SP3屏幕有漏光，照片看起来没有这么明显，但是平时看起来就不能忍了<br><img src="http://ww1.sinaimg.cn/large/4ec84d23gw1eqwxwmrqloj21kw0w0tlt.jpg" alt=""><br>贴吧有人说屏幕太暖，黄黄的，要更新驱动才好一点，这里拍了张对比图片<br><img src="http://ww1.sinaimg.cn/large/4ec84d23gw1eqwy19kl97j21kw0w0qao.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/4ec84d23gw1eqwy1r77k8j21kw0w07iv.jpg" alt=""><br>左边SP3又上NEXUS 7 2013，右下左边NOTE2右边魅蓝NOTE。（我真不知道那NOTE2到底是怎么回事<br>SP3的屏幕可视角度也不够好，对于屏幕反光控制的效果也不是很好，简直就像个镜子一样。微软说漏光这个可以修，但是贴吧说返修回来机子更烂了所以感觉小问题的话还是谨慎返修。</p>
<h3 id="做工">做工</h3><p><img src="http://ww1.sinaimg.cn/large/4ec84d23gw1eqwy83jty9j21kw0w0wrj.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/4ec84d23gw1eqwy9ia2mzj21kw0w017c.jpg" alt=""><br>手上的机子在上方交接处发现了这个样子<br>右边还蛮正常的左边缝隙真jb大。想要把它压回去都做不到。<br>所以买机子的话最好还是能到实体店去挑</p>
<h3 id="首次开机">首次开机</h3><p>首次开机就是首次使用的设置界面了，设置好使用习惯，连接网络，绑定微软账号，配对压感笔后就能开始使用了。推荐先经行一次系统的全面更新，有条件的把驱动更新一下。</p>
<h3 id="分辨率">分辨率</h3><p>SP3分辨率比较高，屏幕也比较小，这就导致了很多地方字太小的问题。虽然windows有放大的设置方案不过许多软件支持还是不够的。这点就需要注意一下了</p>
<h3 id="Metro应用">Metro应用</h3><p>平时用的话推荐尽量都走Metro应用，相较于桌面应用较为省电，也更加适合触控操作。在桌面环境使用chrome的时候cpu占用特别多，频率也特别高，开不了多久看个网页什么的风扇声音就像直升机一样了。摸一摸机子简直可以直接做铁板烧。相比较下metro界面下的ie几乎不会有这样的情况发生。不过有点可惜的是奶牛去广告的方法对于ie来说不起作用，ie通过隐私保护屏蔽的广告效果也不太好，带端口的页面访问也不支持。</p>
<h3 id="输入法">输入法</h3><p>自己在Windows下面蛮喜欢小狼毫的输入法，不过到Win8.1后就有问题了。不像微软自己的输入法，微软给自己的输入法开了洞使得微软自己的输入法可以使用自己的服务来调整词库排序常用字词等。rime在metro应用中不能使用自己的服务，在metro应用中也会出现打字不显示或者应用打不开的问题，需要切换成其他输入法才行。rime作者给的说法是做不了，不支持。在SP3上主要也用metro应用，在metro应用中还是老老实实用微软的输入法吧，其实用起来感觉也不错的。</p>
<h3 id="hyper-v虚拟机">hyper-v虚拟机</h3><p>SP3用Hyper-v的问题可以看<a href="https://chinuno-usami.github.io/2015/03/25/surface-pro-e4-b8-ad-e7-9a-84hyper-v/" target="_blank" rel="external">这篇文章</a>。需不需要这些特性还是看需求了。</p>
<h3 id="压感笔">压感笔</h3><p>SP3的压感笔在sai上没有压感，这个问题是SP3原来的驱动不支持的问题，想要在sai上能够有压感的话可以到N-trig官网下载驱动解决这一问题。<br>SP3的笔在使用上感觉延迟比较严重，比较影响体验。在撸osu!的时候试了一下这延迟简直没眼看了。。直接上手指去点倒是没有延迟的问题。在onenote上写字画画也会感觉到延迟。</p>
<h3 id="触摸屏">触摸屏</h3><p>Windows从win7就已经加入对触摸屏的支持了，一直到win8.1也算做的不错的了(看看隔壁Mac。<br>现在SP3用久了让我用普通不带触摸屏的Win8.1本我都不会用了ww<br>在习惯了触摸操作之后真的比键鼠操作方便了许多。从左边划入是metro应用选择右边划入是charms。上下划入是metro应用的附加菜单···</p>
<h3 id="Type_Cover">Type Cover</h3><p>SP3的话Type Cover已经是必备配件了。使用GPIO接口比较省电。三个档位的背光可以调节，不需要也可以关掉。键盘的手感特别不错，虚拟键盘的体验实在是太差了。<br>磁铁二段吸附对于打字时候的体验提升特别大，算是这一代最大的改进了吧。<br>在触摸板区域还有个贴心的小细节，左右向内划入就像直接在屏幕划入一样，切换metro应用和唤出charms。这功能在普通笔记本上没有的。虽然说可能多此一举，但是有时候打字打一半手就不想离开键盘区，稍微省了点力ww。<br>手上的TC空格键中间弯下去，两边翘起来这不知道是故意这样设计的还是本身设计上的缺陷还是自己RP的问题。。</p>
<h3 id="QQ">QQ</h3><p>我觉得应该还有很多人想要在SP3上面运行QQ的，QQ的桌面端体验要好些，不过QQ为了降低对内存的使用对硬盘读写操作特别频繁(还有不知道在做什么的对磁盘文件的扫描((。频繁的读写文件对SSD的寿命影响特别大，QQ这样开着一天下来都不知道对SSD造成多大的伤害了，所以现在SP3上不运行QQ，全都在手机上开了。贴吧上看到有人在说开QQ的时候很经常出现假死现象，或许也应该注意一下。充电器上面还有个USB接口可以直接给手机供电，也不用太担心手机电量的问题。</p>
<h3 id="SD卡">SD卡</h3><p>机子的存储空间是128G，实际上只有113G可用，去除系统所占的已经剩下不到一半了。还好SP3还提供了micro SD卡的扩展支持。<br>现在的使用中使用的工具尽量使用的免安装版本，放在SD卡上。一些文档，音乐，图片什么的也尽量放在卡上。SSD的空间则用于环境搭建，IDE安装之类的，比较常用而且开启速度快些。</p>
<h3 id="5Ghz">5Ghz</h3><p>SP3是支持5Ghz的wifi的。在平时宿舍使用的时候宿舍不是很大，而且周围开wifi的人多，在2.4Ghz频率上干扰严重，所以还是推荐买个双频路由器，在宿舍的时候使用5Ghz的wifi来保证速度。现在在宿舍手机，平板，SP3全都支持5Ghz，所以不太会有别人那些wifi速度慢的困扰lww</p>
<h3 id="其他操作系统">其他操作系统</h3><p>SP3用的marvell方案，想要装linux或者黑苹果的话可能会有问题了<br>黑苹果的话youtube有人放了个视频，会有下面这些问题。所以SP3的话还是好好用windows吧，况且本身sp3就是专门为windows系统做的，搞那些有的没的那还是买其他机子吧。</p>
<ul>
<li>内置wifi 蓝牙不可用，需买usb外置</li>
<li>触屏不可用</li>
<li>休眠死机</li>
<li>触摸板基本不可用</li>
<li>耳机插口</li>
<li>可正常工作的有小bug</li>
<li>QE/CI 硬件加速偶尔有小bug，改屏幕色彩有助于改善。</li>
</ul>
<h1 id="最后再说点">最后再说点</h1><p>这篇文章是我昨天开始写的，没写完留到今天开始写。早上又听到有人想要买这机子了，说是为了装逼。。要装逼怎么不去买NMB啊，连接口都只留一个type-c的usb，这配置这价格不正好符合你装逼的目的。<br><img src="http://ww1.sinaimg.cn/large/4ec84d23gw1eqx0tod18kj21kw11x1kx.jpg" alt=""><br>听着萌否电台边码字也是很舒服的体验~</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="缘由">缘由</h1><p>自己在几个月前入了Surface Pro 3，然后身边有人看到之后也买了个，自己就像把自己用了几个月的感受说一下方便各位在想买这机子的时候进行参考。</p>]]>
    
    </summary>
    
      <category term="Microsoft" scheme="http://chinuno-usami.github.io/tags/Microsoft/"/>
    
      <category term="Surface Pro 3" scheme="http://chinuno-usami.github.io/tags/Surface-Pro-3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[迁移到Github上了]]></title>
    <link href="http://chinuno-usami.github.io/2015/04/05/hexo/"/>
    <id>http://chinuno-usami.github.io/2015/04/05/hexo/</id>
    <published>2015-04-05T02:10:58.000Z</published>
    <updated>2015-04-05T03:54:35.980Z</updated>
    <content type="html"><![CDATA[<h3 id="0x00">0x00</h3><p>原来放博客的地方这速度实在受不了所以干脆丢Github上来了，况且还是静态页面速度要快一点。</p>
<h3 id="0x01">0x01</h3><p>树莓派上面的nodejs天天检查更新终于昨天更新了个npm可以用的版本了<br>所以直接在树莓派上面搞了个<a href="http://hexo.io" target="_blank" rel="external">hexo</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="0x02">0x02</h3><p>路由器加了<code>DDNS</code>和<code>ssh</code>,<code>4000端口</code>的端口轉發<br>這樣就可以在任何地方連接到樹莓派進行寫作和部署了</p>
<h3 id="0x03">0x03</h3><p>把该设置的东西设置好之后就把原来wordpress的文章给导过来<br>要用到<a href="https://github.com/hexojs/hexo-migrator-wordpress" target="_blank" rel="external">hexo-migrator-wordpress</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure></p>
<p>在wordpress后台导出数据后就可以用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate wordpress &lt;<span class="built_in">source</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>导入了<br>需要注意的是导入会把所有的文章页面全部导入，连已经删除放到回收站的都会被导进去，所以不要的文章页面还需要手动删除。<br>另外插件会把文章转换成markdown，有些地方还需要修改，比如<a href="http://chinuno-usami.github.io/2015/03/18/vs2013-e5-88-a9-e7-94-a8-e5-ae-8f-e6-b7-bb-e5-8a-a0-e5-87-bd-e6-95-b0-e6-b3-a8-e9-87-8a/" target="_blank" rel="external">关于vs2013宏</a>的那篇文章中的/*…*/就没有转换好，正常情况需要转义字符来表示*而不是变成斜体文字<br>另外还有原来wordpress使用各种代码高亮插件，转换成markdown后不能正常使用。hexo可以使用<a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">GitHub Flavored Markdown</a><br>所以可以用</p>
<blockquote>
<p>``` ruby<br>require ‘redcarpet’<br>markdown = Redcarpet.new(“Hello World!”)<br>puts markdown.to_html<br>```</p>
</blockquote>
<p>这样的方式进行代码高亮，这些地方也需要手动修改</p>
<h3 id="0x04">0x04</h3><p>不得不说这初代树莓派的性能确实捉急，npm安装需要的东西时就觉得特别慢了，在<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p>
<p>的时候要等好久本地服务器才能起来，而查看页面的时候也是要等好久<br>还好在生成页面和部署的时候虽然也花了好长时间，不过速度不是很慢。对于没有vps的我来说已经是最好的方案了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="0x00">0x00</h3><p>原来放博客的地方这速度实在受不了所以干脆丢Github上来了，况且还是静态页面速度要快一点。</p>
<h3 id="0x01">0x01</h3><p>树莓派上面的nodejs天天检查更新终于昨天更新了个npm可以用的版本了<br>所以直接在树莓派上面搞了个<a href="http://hexo.io">hexo</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Github" scheme="http://chinuno-usami.github.io/tags/Github/"/>
    
      <category term="hexo" scheme="http://chinuno-usami.github.io/tags/hexo/"/>
    
      <category term="树莓派" scheme="http://chinuno-usami.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[坑爹的魅蓝note调试adb问题]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/28/e5-9d-91-e7-88-b9-e7-9a-84-e9-ad-85-e8-93-9dnote-e8-b0-83-e8-af-95adb-e9-97-ae-e9-a2-98/"/>
    <id>http://chinuno-usami.github.io/2015/03/28/e5-9d-91-e7-88-b9-e7-9a-84-e9-ad-85-e8-93-9dnote-e8-b0-83-e8-af-95adb-e9-97-ae-e9-a2-98/</id>
    <published>2015-03-27T16:19:18.000Z</published>
    <updated>2015-04-04T13:08:38.010Z</updated>
    <content type="html"><![CDATA[<p>要用电脑调试魅蓝note做开发的时候遇到了很蛋疼的问题，连接之后adb死活找不到手机，手机自带了驱动和说明书，自带的驱动无法通过验证装不了，按照说明书的方法修改.Android下面的ini配置文件也没法解决。最后强制指定google自己的adb驱动后总算是解决了这坑爹问题。。<br>这驱动根本就没法安装你还丢手机你坑人做什么otl</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>要用电脑调试魅蓝note做开发的时候遇到了很蛋疼的问题，连接之后adb死活找不到手机，手机自带了驱动和说明书，自带的驱动无法通过验证装不了，按照说明书的方法修改.Android下面的ini配置文件也没法解决。最后强制指定google自己的adb驱动后总算是解决了这坑爹问题。]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[树莓派炸了！]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/27/e6-a0-91-e8-8e-93-e6-b4-be-e5-87-ba-e9-97-ae-e9-a2-98-e4-ba-86-ef-bc-9f-ef-bc-81/"/>
    <id>http://chinuno-usami.github.io/2015/03/27/e6-a0-91-e8-8e-93-e6-b4-be-e5-87-ba-e9-97-ae-e9-a2-98-e4-ba-86-ef-bc-9f-ef-bc-81/</id>
    <published>2015-03-27T15:07:15.000Z</published>
    <updated>2015-04-18T15:57:23.725Z</updated>
    <content type="html"><![CDATA[<p>一直都在用树莓派跑着Archlinux当成服务器做一些自动化的事情，平时也确实帮了不少忙。因为有ddns所以就算在外面也能ssh连接到树莓派中进行操作。<br>已经好几个月没有滚过了昨天突然想要滚一下然后就用SP3连着树莓派让他自己滚去了，77个包更新过程非常久，把它放一边后自己睡着了。今天开了sp3才发现机子自动休眠了，已经中断的putty窗口上面的东西还没滚完。回到家后又Syu滚了一次。<br>然后蛋疼的事情来了，有个东西运行不太正常以为是机子的问题（（最后发现还是因为众所周知的原因【然后就reboot了。<br>这下好了启动后发现所有的服务都不能正常运行了，又想起好像上次滚的时候自己也没有重启过。<br>仔细看了看发现写操作都不能执行了，只能收到read-only file system的提示。<br>然后检查了下mount列表，所有的目录都是已经挂载了rw。。这下真蛋疼了，问题出在哪都不知道了<br>后来想想可能是fstab出问题了，所以想要找个原来的镜像来看看原来的fstab是怎样的。<br>之前的镜像包早就被删了，于是到官网去想要下载一个，竟然发现Archlinux的镜像早就被撤下来了<br>好吧，最后网上找了好久才找到一个14年的镜像。100+mb的zip包先下载下来了<br>自己的想法是hyper-v开个虚拟机，用把镜像传入虚拟机中挂载后查看fstab的内容<br>但是创建虚拟机后发现虚拟交换机根本就设置不了无法使用网络传输镜像了<br>最后想了个曲线的方法，创建个10G的vhd挂载到win8.1宿主机上，把镜像解压出img放到vhd虚拟硬盘中然后再挂到虚拟机上挂载<br>解压出来后1G+将近2G，不是很大w。mkdir /mnt/vhd创建挂载目录后mount /dev/sdb2 /mnt/vhd挂载上去（sda是虚拟机系统所在的磁盘，sdb是刚才的vhd磁盘，数据放在sdb2上<br>因为img是整个磁盘的镜像，/目录是在p5上面所以不能直接挂载<br>简单的方法，fdisk -lu blabla.img查看磁盘信息<br>Units = sectors of 1 * 512 = 512 bytes<br>单位大小为512字节<br>再乘上blabla.img5的Start算出位移<br>然后就可以挂载分区了<br>mkdir /mnt/archlinux_img<br>最后使用mount -o loop,offset=niconico /mnt/vhd/blabla.img /mnt/archlinux_img/<br>把分区挂载上去<br>vim /mnt/archlinux_img/etc/fstab查看内容后发现<br>里面的东西竟然是一样的！！！<br>最后只能暂时每次开机后都运行一次<br>mount -o remount,rw /来获取写入权限了（所以到底为什么remount后可以写入原来那样就不行？！！<br>然后蛋疼的还要每次都创建一个作为交换分区的文件挂到交换分区上去，这样以后没事还不能乱重启了，一来这些操作麻烦又费事，二来sd还经不起这样的折腾不知道什么时候就挂掉了。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一直都在用树莓派跑着Archlinux当成服务器做一些自动化的事情，平时也确实帮了不少忙。因为有ddns所以就算在外面也能ssh连接到树莓派中进行操作。<br>已经好几个月没有滚过了昨天突然想要滚一下然后就用SP3连着树莓派让他自己滚去了，77个包更新过程非常久，把它放一边]]>
    </summary>
    
      <category term="树莓派" scheme="http://chinuno-usami.github.io/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[surface pro中的hyper-v]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/25/surface-pro-e4-b8-ad-e7-9a-84hyper-v/"/>
    <id>http://chinuno-usami.github.io/2015/03/25/surface-pro-e4-b8-ad-e7-9a-84hyper-v/</id>
    <published>2015-03-24T16:11:19.000Z</published>
    <updated>2015-04-04T13:08:38.010Z</updated>
    <content type="html"><![CDATA[<p>最近发现surface pro3在查看任务管理器的时候cpu频率总是显示为2.4Ghz，即使什么都不开也不会降下来。而以前刚入手的时候记得频率都降得很低的。<br>另外发现InstantGo功能竟然没了，只要一盖上键盘都直接休眠了，要按下电源键等待几秒才能再开。<br>后来才看到这篇文章<br><a href="http://winsupersite.com/mobile-devices/surface-pro-3-tip-hyper-v-vs-connected-standby" target="_blank" rel="external">http://winsupersite.com/mobile-devices/surface-pro-3-tip-hyper-v-vs-connected-standby</a><br>原来在开启了hyper-v后InstantGo就会被禁用，同时surface的电源管理多出来原来没有的节能和高性能两个设置<br>关于cpu频率的问题网上说的是hyper-v和Intel的一些软件有兼容性问题，看来之前android的x86虚拟机提示cpu不支持虚拟化也极有可能是因为hyper-v产生的。如果不是特别需要的话果然还是把它关掉比较好，微软在开发wp应用的时候也要求打开hyper-v才可以。如果是开发wp应用这样不得不用的话那也没什么办法可以解决了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近发现surface pro3在查看任务管理器的时候cpu频率总是显示为2.4Ghz，即使什么都不开也不会降下来。而以前刚入手的时候记得频率都降得很低的。<br>另外发现InstantGo功能竟然没了，只要一盖上键盘都直接休眠了，要按下电源键等待几秒才能再开。<br>后来]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux内核代码风格]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/22/linux-e5-86-85-e6-a0-b8-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc/"/>
    <id>http://chinuno-usami.github.io/2015/03/22/linux-e5-86-85-e6-a0-b8-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc/</id>
    <published>2015-03-21T18:41:02.000Z</published>
    <updated>2015-04-04T16:56:06.200Z</updated>
    <content type="html"><![CDATA[<p>这学期有个Linux驱动开发的课程，所以看了Linux内核源代码中的Documentation中关于代码风格的部分<br>发现关于缩进他说的是缩进使用八个字符，不能用空格缩进<br>其中还有一句是这么说的：有些异端运动试图将缩进变为4（乃至2）个字符深，这几乎相当于尝试将圆周率的值定义为3。<br>其实自己平时都喜欢用空格四个字符来进行缩进的= =!<br>vi默认的制表符就是8个字符不知道是制表符原来就是这样定义的还是说后面的编辑器因为4字符的缩进习惯流行起来而进行的改变<br>现在让我看8字符的缩进真是特别难受了【【之前看google的代码都是两个空格缩进的感觉也是otl</p>
<p>关于大括号的时候，个人是习惯于左括号放在行尾右括号都放在行首单独一行，看到文档中的描述我又深深的觉得蛋要碎了。。<br>一般情况下所有的非函数语句块（if、switch、for、while、do）。跟我平时的习惯一样，但是函数就要使用左括号另开一行的方式。。说好的代码风格统一呢！给出的理由也真是强词夺理的感觉<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (action) &#123; </span><br><span class="line"><span class="keyword">case</span> KOBJ_ADD: </span><br><span class="line">	<span class="keyword">return</span> <span class="string">"add"</span>; </span><br><span class="line"><span class="keyword">case</span> KOBJ_REMOVE: </span><br><span class="line">	<span class="keyword">return</span> <span class="string">"remove"</span>; </span><br><span class="line"><span class="keyword">case</span> KOBJ_CHANGE: </span><br><span class="line">	<span class="keyword">return</span> <span class="string">"change"</span>; </span><br><span class="line"><span class="keyword">default</span>: </span><br><span class="line">	<span class="keyword">return</span> NULL; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> x)</span> </span><br><span class="line"></span>&#123; </span><br><span class="line">	body of function </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>额。上面的代码其实缩进是8字符的制表符，因为代码高亮插件所以显示成4个空格<br>语句剩余的部分还要紧接在右括号后面，放在typedef或者do-while里面上感觉蛮正常的，但是像这样<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x == y) &#123; </span><br><span class="line">		.. </span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y) &#123; </span><br><span class="line">		... </span><br><span class="line">	&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">		.... </span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>真的就觉得怪异了，到现在基本上还没见过有人用这样的风格写if-else的。。</p>
<p>在命名方面倒是看到了这么一句话：在函数名中包含函数类型（所谓的匈牙利命名法）是脑子出了问题——编译器知道那些类型而且能够检查那些类型，这样做只能把程序员弄糊涂了。难怪微软总是制造出有问题的程序。<br>嗯。先不管匈牙利命名法本意是什么，微软本身使用的时候就已经产生误解错误的使用了，这样的命名方式看起来用起来真的都特别累人，做windows下面的游戏开发已经看的太多这样的东西了otl估计这句话也就是整篇文档自己唯一能赞同的一句了吧</p>
<p>Linux的注释风格一律使用C89标准的/* …*/不知道是不是为了和以前的代码统一风格<br>而在微软的代码中看到的则是C99标准提倡的//注释</p>
<p>同样属GNU阵营的emacs都在文档里面被喷说格式化出来的都是他们之前说的异端，还要修改设置改成k&amp;r要求的格式<br>就连专门为k&amp;r格式开出一个选项的indent不也是默认4字符缩进嘛，要8字符缩进还要另外加参数ヽ(｀⌒´)ノ<br>为Linux的代码统一一个规范风格是很好，但是做到这种程度感觉真是神经病了</p>
<p>额。虽然Kernighan和Ritchie写了The C Programming Language哪里都能看到对这本书的称赞，但是感觉这东西并不能表示k&amp;r风格就是最好的blabla。<br>相信很多人学C也都是看这书来学的，自然就按照他们的风格来了。想想看国内多少看谭浩强的书学的C，绝大多数人码出来的代码还都是void main(){}这样的东西【说起来有的人说是因为当时谭浩强用的是旧标准所以才会有这样的东西，不过C99的确要求main()函数的返回值是int，但是c89也没有void main()这样的东西，最多也就main()这样而已。又不是说用在单片机或者什么特殊用途的地方才有void的main,况且那些编译器都还是特殊的编译器故意这样设计的。国内学校好像对标准这东西也不怎么重视，现在不还是一大片一大片的教科书都是void main()么，连用的IDE都还是TC或者VC6这样连C99标准都不支持的老古董。</p>
<p>他们写的书好坏是一回事。自己想说的是每个人刚开始接触的时候学到的是什么就认为该是怎么样，极力推崇或者有特别的好感，然后又去安利别人所以才。。。相信现在也不会有人喜欢匈牙利命名法吧，不过现在还有那么多人用这种方式写代码也是受了微软【MFC之类的。】的影响，一开始接触的是windows开发就觉得理所应当就是这种样子的。国外不还有某大牛14岁开始学了PHP后来大学CS课程学C的时候还一直困惑变量怎么可能不加$的么。</p>
<p>晚安。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这学期有个Linux驱动开发的课程，所以看了Linux内核源代码中的Documentation中关于代码风格的部分<br>发现关于缩进他说的是缩进使用八个字符，不能用空格缩进<br>其中还有一句是这么说的：有些异端运动试图将缩进变为4（乃至2）个字符深，这几乎相当于尝试将圆]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最近的新想法]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/22/e6-9c-80-e8-bf-91-e7-9a-84-e6-96-b0-e6-83-b3-e6-b3-95/"/>
    <id>http://chinuno-usami.github.io/2015/03/22/e6-9c-80-e8-bf-91-e7-9a-84-e6-96-b0-e6-83-b3-e6-b3-95/</id>
    <published>2015-03-21T17:06:26.000Z</published>
    <updated>2015-04-04T13:08:38.000Z</updated>
    <content type="html"><![CDATA[<p>最近想要研究一下android系統，打算從源代碼編譯一下android，大概看了看編譯方法。<br>他的要求是需要在64bit版本的Linux或者OS X上面才能進行編譯<br>看了看手頭的機子，老電腦雖然跑著ubuntu但是cpu不支援64bit<br>Surface Pro3存儲空間太小不夠用，使用虛擬機一個編譯效率也低，所以也不能考慮了<br>剩下的只有宿舍的電腦了，本身用著openSUSE也是64bit的Linux系統，在環境搭建方面比起ubuntu麻煩點，剩餘的存儲空間也不知道夠不夠用，下個星期如果還記得的話看看能不能用咯</p>
<p>上次說過用於樹莓派的交叉編譯環境可能要坑了「「「。<br>因為發現了其他好像能解決這個問題的方法不需要再交叉編譯了<br>本身的想法是從源代碼開始自己配置編譯個個交叉環境的，看來暫時沒機會了「「「連自己都不信以後這坑能填上</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近想要研究一下android系統，打算從源代碼編譯一下android，大概看了看編譯方法。<br>他的要求是需要在64bit版本的Linux或者OS X上面才能進行編譯<br>看了看手頭的機子，老電腦雖然跑著ubuntu但是cpu不支援64bit<br>Surface P]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VS2013利用宏添加函数注释]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/18/vs2013-e5-88-a9-e7-94-a8-e5-ae-8f-e6-b7-bb-e5-8a-a0-e5-87-bd-e6-95-b0-e6-b3-a8-e9-87-8a/"/>
    <id>http://chinuno-usami.github.io/2015/03/18/vs2013-e5-88-a9-e7-94-a8-e5-ae-8f-e6-b7-bb-e5-8a-a0-e5-87-bd-e6-95-b0-e6-b3-a8-e9-87-8a/</id>
    <published>2015-03-18T11:00:10.000Z</published>
    <updated>2015-04-04T19:15:37.960Z</updated>
    <content type="html"><![CDATA[<p>使用vs2013码代码的时候觉得添加函数注释太麻烦所以就想说利用vs的宏功能来实现函数注释的添加<br>然后发现微软在vs2013去掉了宏的功能，但是还是可以用插件添加回去<br><a href="https://visualstudiogallery.msdn.microsoft.com/d3fbf133-e51b-41a2-b86f-9560a96ff62b" target="_blank" rel="external">Macros for Visual Studio 2013 </a><br>添加后发现宏不再是使用vb来写了，变成了javascript</p>
<h1 id="Features"><strong>Features</strong></h1><ul>
<li>Record and playback active document operations and Visual Studio IDE commands</li>
<li>Playback multiple times</li>
<li>Manage and persist macros with a Macro Explorer</li>
<li>Assign keyboard bindings to any macro</li>
<li><strong>Macros recorded as JavaScript files that call VS DTE APIs</strong></li>
<li>Macro editing in Visual Studio with DTE IntelliSense</li>
<li>Stop playback</li>
<li>Sample macros</li>
</ul>
<p>新建如下的宏<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Macro.InsertText(<span class="string">"//-----------------------------------【()函数】--------------------------------------"</span>);</span><br><span class="line">dte.ActiveDocument.Selection.NewLine();</span><br><span class="line">Macro.InsertText(<span class="string">"//	描述   ："</span>);</span><br><span class="line">dte.ActiveDocument.Selection.NewLine();</span><br><span class="line">Macro.InsertText(<span class="string">"//	参数   ："</span>);</span><br><span class="line">dte.ActiveDocument.Selection.NewLine();</span><br><span class="line">Macro.InsertText(<span class="string">"//	返回值 ："</span>);</span><br><span class="line">dte.ActiveDocument.Selection.NewLine();</span><br><span class="line">Macro.InsertText(<span class="string">"//	作者   ：Chinuno Usami"</span>);</span><br><span class="line">dte.ActiveDocument.Selection.NewLine();</span><br><span class="line">Macro.InsertText(<span class="string">"//	创建日期："</span>);</span><br><span class="line"><span class="keyword">var</span> dat = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">Macro.InsertText(dat.getDate().toString() + <span class="string">'/'</span> + dat.getMonth().toString() + <span class="string">'/'</span> + dat.getYear().toString());</span><br><span class="line">dte.ActiveDocument.Selection.NewLine();</span><br><span class="line">Macro.InsertText(<span class="string">"//----------------------------------------------------------------------------------------"</span>);</span><br></pre></td></tr></table></figure></p>
<p>执行后的效果是这样<br><img src="http://ww1.sinaimg.cn/large/4ec84d23gw1eqa38f3pklj21hc0tednt.jpg" alt=""><br>添加ctrl+m,1的快捷键就能快速添加了。<br>最后的效果大概是这样的<br><img src="http://ww3.sinaimg.cn/large/4ec84d23gw1eqa3hfpyzbj20sp09s40s.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/4ec84d23gw1eqa3i3imraj20f304rdgl.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用vs2013码代码的时候觉得添加函数注释太麻烦所以就想说利用vs的宏功能来实现函数注释的添加<br>然后发现微软在vs2013去掉了宏的功能，但是还是可以用插件添加回去<br><a href="https://visualstudiogallery.msdn.micro]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[随便写点什么]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/11/e9-9a-8f-e4-be-bf-e5-86-99-e7-82-b9-e4-bb-80-e4-b9-88/"/>
    <id>http://chinuno-usami.github.io/2015/03/11/e9-9a-8f-e4-be-bf-e5-86-99-e7-82-b9-e4-bb-80-e4-b9-88/</id>
    <published>2015-03-11T15:32:25.000Z</published>
    <updated>2015-04-04T13:08:38.000Z</updated>
    <content type="html"><![CDATA[<p>这学期开了Android开发的课。以前没开过的课教材用的外面随便买的一本Android开发xx天速成。。内容都好几年前的了- =真是一点营养也没有</p>
<p>搞个android开发环境，由于众所周知的原因- =整个过程真是生不如死，原来一直很有用的镜像服务器都不能用了，唯一能用的镜像只能下到x86的android系统镜像。surface pro3应该是支持VT-X的虚拟化的在其他虚拟机都能用，在任务管理器也看到虚拟化已经打开了但是HAXM就是装不上总是提示机子不支持虚拟化- =然后只能很无解的每次都接上NEXUS7实机调试了，，，</p>
<ul>
<li>=还有那啥。V2EX被墙了= -看着百毒那抓得满满的V2EX页面没有一个能开的= -真棒，你说说你国还有救？还想发展强大？吃翔去吧</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这学期开了Android开发的课。以前没开过的课教材用的外面随便买的一本Android开发xx天速成。。内容都好几年前的了- =真是一点营养也没有</p>
<p>搞个android开发环境，由于众所周知的原因- =整个过程真是生不如死，原来一直很有用的镜像服务器都不能用了，]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分享大觸]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/06/e5-88-86-e4-ba-ab-e5-a4-a7-e8-a7-b8/"/>
    <id>http://chinuno-usami.github.io/2015/03/06/e5-88-86-e4-ba-ab-e5-a4-a7-e8-a7-b8/</id>
    <published>2015-03-05T16:53:25.000Z</published>
    <updated>2015-04-04T13:08:38.000Z</updated>
    <content type="html"><![CDATA[<p>在b站看到了這麼個視頻</p>
<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=2062604&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">

<p><a href="http://space.bilibili.com/637653" target="_blank" rel="external">http://space.bilibili.com/637653</a> ←up的b站空間</p>
<p>雖然說自己也是學嵌入式的但是這方面確實不太懂，最多也就編編程，對於那些彙編代碼機器碼什麼的也只是看得懂而已，電子部分╮(╯_╰)╭自己實在無解，更別說焊板子之類的東西了，看都沒看過。</p>
<p>對自己不會的東西充滿憧憬之心本身不就是這樣的生物嘛，看到那個做觸盤的視頻後覺得自己也想試試看做個什麼東西，正好還有個樹莓派，雖然說在硬件擴展方面還是比不上Arduino不過能做的事情應該還是很多的。現在的問題是➀.自己都不知道想要做什麼(ˉ▽ˉ；)。➁.想要入手些什麼零件都特別困難，想想還是洗洗碎了吧「「「。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在b站看到了這麼個視頻</p>
<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://sh]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建arm交叉編譯環境Part.1]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/04/e6-90-ad-e5-bb-baarm-e4-ba-a4-e5-8f-89-e7-b7-a8-e8-ad-af-e7-92-b0-e5-a2-83part-1/"/>
    <id>http://chinuno-usami.github.io/2015/03/04/e6-90-ad-e5-bb-baarm-e4-ba-a4-e5-8f-89-e7-b7-a8-e8-ad-af-e7-92-b0-e5-a2-83part-1/</id>
    <published>2015-03-04T10:03:39.000Z</published>
    <updated>2015-04-04T13:08:38.000Z</updated>
    <content type="html"><![CDATA[<p>要搭建arm處理器的linux交叉編譯環境首先需要有個linux的host環境，環境是搭建在我的surface上面，因為是跑的win8.1所以要搭建環境可以使用cygwin進行環境的搭建，不過因為cygwin畢竟不是原生的linux環境怕會出些不好解決的問題，所以打算用win8自帶的虛擬機hyper-v裝個archlinux作為交叉編譯的系統平臺，然後使用ssh連接過去進行操作。archlinux可以除去不需要的東西做到最小化的編譯環境搭建。</p>
<p>首先到archlinux的官網從163的鏡像下載了最新的archlinux安裝鏡像archlinux-2015.03.01-dual.iso</p>
<p>啟用hyper-v並且重啟後hyper-v虛擬機就可以用了，在hyper-v管理器中新建虛擬交換機用於虛擬機跟外界的網路連接，然後新建archlinux的虛擬機<br><img src="http://ww3.sinaimg.cn/large/4ec84d23gw1eptnvihf4aj20iq0hytcd.jpg" alt=""></p>
<p>啟動虛擬機進行系統的安裝</p>
<p><img src="http://ww2.sinaimg.cn/large/4ec84d23gw1eptuldez6fj20ut0m1aga.jpg" alt=""></p>
<p>安裝完系統裝上必要的網路服務工具和openssh就能ssh到archlinux進行操作了，archlinux使用systemctl就能添加系統服務開機運行了還是很方便的。</p>
<p>archlinux的安裝花的時間不長，但是需要仔細一點，中間漏了某一步可能就需要重來了，最好還是跟著官方wiki上的步驟來做，在安裝環境的/root/下面也有一份簡易的安裝步驟。</p>
<p>這一p就先到這裡吧，更新下一p的時候再繼續後面的步驟。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>要搭建arm處理器的linux交叉編譯環境首先需要有個linux的host環境，環境是搭建在我的surface上面，因為是跑的win8.1所以要搭建環境可以使用cygwin進行環境的搭建，不過因為cygwin畢竟不是原生的linux環境怕會出些不好解決的問題，所以打算用wi]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[入手極路由]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/04/e5-85-a5-e6-89-8b-e6-a5-b5-e8-b7-af-e7-94-b1/"/>
    <id>http://chinuno-usami.github.io/2015/03/04/e5-85-a5-e6-89-8b-e6-a5-b5-e8-b7-af-e7-94-b1/</id>
    <published>2015-03-04T05:31:21.000Z</published>
    <updated>2015-04-04T13:08:38.000Z</updated>
    <content type="html"><![CDATA[<p>現在手上的設備大部分都能用5G的wifi了，加上學校在使用的路由器在自動設置路由表有些問題早就想換了所以入了個極路由。開箱後是這樣的 <img src="http://ww3.sinaimg.cn/large/4ec84d23gw1eptm8trsjqj219c0pidqa.jpg" alt=""></p>
<p>之前網上看人說電源特別大，實際到手之後感覺還行，不算大的。</p>
<p>在初始配置後能夠上網了<br><img src="http://ww3.sinaimg.cn/large/4ec84d23gw1eptmfobzeqj20kr0hgdju.jpg" alt=""></p>
<p>surface使用802.11ac連接，在學校宿舍各種干擾使用5g頻段還是很有必要的。</p>
<p>極路由的後臺界面挺美的，使用起來應該說還是很方便的，內置了幾大上網認證功能，所以才打算在學校使用極路由。</p>
<p>極路由宣傳的一個亮點是擴展插件，實際上那些插件除了標配的ddns，端口轉發其他都是用不上的，數量也不算多「話說之前貼吧看到過的ss插件怎麼沒有，難道要日更版才有？」</p>
<p>大約看了看極路由系統的信息之後發現。。這極路由的系統其實就是個openwrt。。。不過極路由團隊進行了web界面的美化加入了點遠程操作的功能，對於不太喜歡搞七搞八的人來說還是很方便的，現在智能手機的系統大部分不還是android自己改的嘛「「「</p>
<p>極路由的信號設置默認強的情況下隔著兩堵牆大約十米範圍2.4g頻段信號跟我原來使用的TPLINK路由器差不多，5G頻段信號只有一格，表現還行。</p>
<p>剛到手還不能看出有什麼問題，以後如果出現了網上人說的連接不穩定之類的再在這裡更新吧。</p>
<p>&nbsp;</p>
<p>————————————————————————————————————</p>
<p>2015年3月8日更新。今天是把極路由帶到學校的第一天，結果在配置路由器的時候發生了蛋疼的事情。路由器通電之後過了大約三分鐘才開始亮燈能連wifi，然後過了大約兩分鐘才能進得去後臺。然後突然後臺進不去了w(ﾟДﾟ)w！！把手頭四臺設備全都試了一遍都進不去我蛋疼了，，重啟之後又是漫長的等待，還是沒能進去。。最後把它放置play蠻長一段時間後重新啟動路由器，忐忑的等了五分鐘終於能夠進去了。。當時整個人都要炸了。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>現在手上的設備大部分都能用5G的wifi了，加上學校在使用的路由器在自動設置路由表有些問題早就想換了所以入了個極路由。開箱後是這樣的 <img src="http://ww3.sinaimg.cn/large/4ec84d23gw1eptm8trsjqj219c0pidqa]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[明天的计划]]></title>
    <link href="http://chinuno-usami.github.io/2015/03/04/e6-98-8e-e5-a4-a9-e7-9a-84-e8-ae-a1-e5-88-92/"/>
    <id>http://chinuno-usami.github.io/2015/03/04/e6-98-8e-e5-a4-a9-e7-9a-84-e8-ae-a1-e5-88-92/</id>
    <published>2015-03-03T16:01:08.000Z</published>
    <updated>2015-04-04T13:08:38.000Z</updated>
    <content type="html"><![CDATA[<p>为了编译树莓派上面运行的程序明天或许会搭建一个交叉编译环境。</p>
<p>用archlinux做server真是作死了。。好几个月没滚今天滚下看看还能不能活得成。</p>
<p>————————————————</p>
<p>成功滚完，这次更新的东西真多。暂时还没发现什么异常，就怕下次重启之后挂掉otl</p>
<p>晚安。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了编译树莓派上面运行的程序明天或许会搭建一个交叉编译环境。</p>
<p>用archlinux做server真是作死了。。好几个月没滚今天滚下看看还能不能活得成。</p>
<p>————————————————</p>
<p>成功滚完，这次更新的东西真多。暂时还没发现什么]]>
    </summary>
    
      <category term="未分类" scheme="http://chinuno-usami.github.io/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
</feed>